#!/usr/bin/env python

import sys
import base64
import urllib2
import json
import argparse
import ast
import re
from urlparse import urlparse


def setup():
    parser = argparse.ArgumentParser(
        description='Check WebLogic server health using the REST API.',
        epilog='Long description here'
    )
    parser.add_argument('-H', '--host', type=str,
                        help='ip|hostname:port of the admin server to check',
                        required=True)
    parser.add_argument('-U', '--url', type=str,
                        help='ip|hostname:port of the admin server to check',
                        default='/management/tenant-monitoring')
    parser.add_argument('-u', '--username', type=str,
                        help='user to authenticate with', required=True)
    parser.add_argument('-p', '--password', type=str,
                        help='password to authenticate with', required=True)
    parser.add_argument('-t', '--type', type=str,
                        help='Type of check to execute', default='server')
    parser.add_argument('-s', '--server', type=str,
                        help='Server to check', default='')
    parser.add_argument('-w', '--warning', type=int,
                        help='A warning threshold for applicable checks')
    parser.add_argument('-c', '--critical', type=int,
                        help='A critical threshold for applicable checks')
    parser.add_argument('-v', '--verbose',
                        help='Output Nagios extended format',
                        action='store_true',
                        default=False)
    return parser.parse_args()



def getdata(url, user, pw):

    try:
        req = urllib2.Request(url, None, {'Accept': 'application/json'})
        auth_header = base64.encodestring('%s:%s' %
                                          (user, pw)).replace('\n', '')
        req.add_header('Authorization', "Basic %s" % auth_header)
        raw = urllib2.urlopen(req).read()
        data = json.loads(raw)
        items = data['body']['items']

        return {'status': 0, 'text': str(items)}

    except urllib2.HTTPError, e:
        return {'status': 2, 'text': "%s: %s" % (e, url)}

    except urllib2.URLError, e:
        o = urlparse(url)
        return {'status': 2, 'text': "Network error: %s: %s" %
                (e.reason.args[1], o.netloc)}

    except Exception, e:
        o = urlparse(url)
        return {'status': 3, 'text': "%s: %s" % (e, o.netloc)}


def check_server(args):

    apiurl = "http://%s%s/servers/%s" % (args.host, args.url, args.server)
    data = getdata(apiurl, args.username, args.password)
    if data['status'] != 0:
        return data

    wls_servers = sorted(ast.literal_eval(data['text']),
                         key=lambda k: k['name'])
    state = {}
    message_verbose = ""

    for wls_server in wls_servers:
        try:
            state[wls_server['state']] += 1
        except KeyError:
            state[wls_server['state']] = 1

        message_verbose += "%s : %s" % (wls_server['name'], wls_server['state'])
        try:
            message_verbose += " : %s\n" %  wls_server['health']
        except KeyError:
            message_verbose += "\n"

        # Set the check CRITICAL if state is not RUNNING or SHUTDOWN
        regexp = re.compile("RUNNING|SHUTDOWN")
        if not regexp.search(wls_server['state']):
            data['status'] = 2

    message = ""
    for k, v in state.iteritems():
        message += "%s: %s - " % (k, v)

    # Strip final " - "
    message = message[:-3]

    if args.verbose:
        message += "\n%s" % message_verbose[:-1]

    data['text'] = message
    return data


def check(args):

    status = {
        0: 'OK',
        1: 'WARNING',
        2: 'CRITICAL',
        3: 'UNKNOWN'
    }

    functions = {
        'server': check_server
    }

    try:
        func = functions[args.type]
        result = func(args)

    except Exception, e:
        result = {'status': 3, 'text': "%s" % (e)}

    print status[result['status']] + ': ' + result['text']
    return result['status']


if __name__ == "__main__":
    sys.exit(check(setup()))
